{"version":3,"file":"commons-258a511dfa133ce3c860.js","mappings":"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","sources":["webpack://code-cactu-website/./node_modules/camelcase/index.js","webpack://code-cactu-website/../src/image-utils.ts","webpack://code-cactu-website/../src/components/hooks.ts","webpack://code-cactu-website/../src/components/picture.tsx","webpack://code-cactu-website/../src/components/layout-wrapper.tsx","webpack://code-cactu-website/../src/components/placeholder.tsx","webpack://code-cactu-website/../src/components/main-image.tsx","webpack://code-cactu-website/../src/components/gatsby-image.browser.tsx","webpack://code-cactu-website/../src/components/gatsby-image.server.tsx","webpack://code-cactu-website/../src/components/static-image.server.tsx","webpack://code-cactu-website/../src/components/static-image.tsx","webpack://code-cactu-website/./src/features/dynamicBackground/BlinkingLinesBgr/logic.ts","webpack://code-cactu-website/./src/features/dynamicBackground/base.tsx","webpack://code-cactu-website/./src/features/dynamicBackground/BlinkingLinesBgr/index.tsx","webpack://code-cactu-website/./src/features/layouts/MainLayout/Nav/NavSeparator.tsx","webpack://code-cactu-website/./src/features/layouts/MainLayout/Nav/NavLinkExtension.tsx","webpack://code-cactu-website/./src/lib/core/functions/getWindow.ts","webpack://code-cactu-website/./src/features/layouts/MainLayout/Nav/NavLink.tsx","webpack://code-cactu-website/./src/features/layouts/MainLayout/Nav/index.tsx","webpack://code-cactu-website/./src/lib/core/hooks/useObjectState.ts","webpack://code-cactu-website/./src/lib/theming/ThemeProvider.tsx","webpack://code-cactu-website/./src/lib/theming/createTheme.ts","webpack://code-cactu-website/./src/features/layouts/MainLayout/AppConfig.tsx","webpack://code-cactu-website/./src/features/layouts/MainLayout/index.tsx","webpack://code-cactu-website/./src/features/theming/index.ts","webpack://code-cactu-website/./src/lib/theming/index.ts","webpack://code-cactu-website/./src/lib/theming/createClassName.ts","webpack://code-cactu-website/./src/lib/theming/createStylesHook.ts"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import DynamicBackgroundBase from \"../base\"\r\n\r\nexport class Line {\r\n  showing = true\r\n\r\n  constructor(\r\n    public x:number,\r\n    public y:number,\r\n    public width:number,\r\n    public length:number,\r\n    public showingSpeed:number,\r\n    public speed:number,\r\n    public opacity:number = 0,\r\n  ) {}\r\n}\r\n\r\nexport default class BlinkingLines extends DynamicBackgroundBase {\r\n  lines:Line[] = []\r\n\r\n  generateObjects() {\r\n    const { lines } = this\r\n    const distance = ({ x:aX, y:aY }, { x:bX, y:bY }) => Math.sqrt( (aX - bX) ** 2 + (aY - bY) ** 2 )\r\n\r\n    lines.splice( 0 )\r\n\r\n    for (let fails = 0;  fails < 100;) {\r\n      const line = this.createLine()\r\n      let addIt = true\r\n\r\n      for (const { x, y } of lines) if (distance( line, { x, y } ) < 50) {\r\n        addIt = false\r\n        break\r\n      }\r\n\r\n      if (addIt) lines.push( line )\r\n      else fails++\r\n    }\r\n  }\r\n\r\n  createLine( line?:Line, xZero = false ) {\r\n    const windowWidth = window.innerWidth\r\n    const windowHeight = window.innerHeight\r\n\r\n    const random = (min, max) => Math.floor( Math.random() * (max - min + 1) ) + min\r\n\r\n    const x = xZero ? 0 : random( 0, windowWidth )\r\n    const y = random( 0, windowHeight )\r\n    const width = random( 1, 3 )\r\n    const length = random( 10, 50 )\r\n    const showingSpeed = random( 1, 3 )\r\n    const speed = random( 2, 10 ) / 10\r\n    const opacity = random( 0, 255 )\r\n\r\n    if (line) {\r\n      line.x = x\r\n      line.y = y\r\n      line.width = width\r\n      line.length = length\r\n      line.showingSpeed = showingSpeed\r\n      line.speed = speed\r\n\r\n      return line\r\n    } else {\r\n      return new Line( x, y, width, length, showingSpeed, speed, opacity )\r\n    }\r\n  }\r\n\r\n  animate = () => {\r\n    const { ctx, lines } = this\r\n    const { width:canvasWidth, height:canvasHeight } = ctx.canvas\r\n\r\n    ctx.clearRect( 0, 0, canvasWidth, canvasHeight )\r\n\r\n    lines.forEach( line => {\r\n      const { x, y, width, length, showing, opacity, showingSpeed, speed } = line\r\n\r\n      ctx.fillStyle = `#444444${(opacity).toString( 16 ).padStart( 2, `0` )}`\r\n      ctx.fillRect( x, y - width / 2, length, width )\r\n\r\n      line.opacity += showingSpeed * (showing ? 1 : -1)\r\n\r\n      if (line.opacity <= 0) {\r\n        line.opacity = 0\r\n        line.showing = true\r\n      } else if (line.opacity >= 255) {\r\n        line.opacity = 255\r\n        line.showing = false\r\n      }\r\n\r\n      if (x > canvasWidth) this.createLine( line, true )\r\n      else line.x += speed\r\n    } )\r\n\r\n    requestAnimationFrame( this.animate )\r\n  }\r\n}\r\n","export default class DynamicBackgroundBase {\r\n  ctx:CanvasRenderingContext2D\r\n\r\n  constructor( canvasElement:HTMLCanvasElement ) {\r\n    this.ctx = canvasElement.getContext( `2d` )!\r\n  }\r\n\r\n  onResize = () => {\r\n    const { canvas } = this.ctx\r\n\r\n    canvas.width = window.innerWidth\r\n    canvas.height = window.innerHeight\r\n\r\n    this.generateObjects()\r\n  }\r\n\r\n  enable() {\r\n    window.addEventListener( `resize`, this.onResize )\r\n\r\n    this.onResize()\r\n    this.generateObjects()\r\n\r\n    requestAnimationFrame( this.animate )\r\n  }\r\n\r\n  disable() {\r\n    window.removeEventListener( `resize`, this.onResize )\r\n  }\r\n\r\n  generateObjects() {\r\n    throw new Error( `You should override that method` )\r\n  }\r\n\r\n  animate() {\r\n    throw new Error( `You should override that method` )\r\n  }\r\n}\r\n","import { useEffect, useRef } from \"react\"\r\nimport createStylesHook from \"@lib/theming/createStylesHook\"\r\nimport BlinkingLines from \"./logic\"\r\n\r\nexport type BlinkingLinesBgrProps = {}\r\n\r\nexport default function BlinkingLinesBgr() {\r\n  const canvasRef = useRef<HTMLCanvasElement>( null )\r\n  const logicRef = useRef<BlinkingLines>()\r\n  const [ classes ] = useStyles()\r\n\r\n  useEffect( () => {\r\n    if (!canvasRef.current) return\r\n\r\n    logicRef.current = new BlinkingLines( canvasRef.current )\r\n    logicRef.current.enable()\r\n\r\n    return () => logicRef.current?.disable()\r\n  }, [ canvasRef.current ] )\r\n\r\n  return <canvas className={classes.blinkingLinesBgr} ref={canvasRef} />\r\n}\r\n\r\nconst useStyles = createStylesHook({\r\n  blinkingLinesBgr: {\r\n    position: `absolute`,\r\n    left: 0,\r\n    top: 0,\r\n    width: `100%`,\r\n    height: `100%`,\r\n  },\r\n})\r\n","import { createStylesHook } from \"@fet/theming\"\r\n\r\nexport default function NavSeparator() {\r\n  const [ classes ] = useStyles()\r\n\r\n  return (\r\n    <hr className={classes.navSeparator} />\r\n  )\r\n}\r\n\r\nconst useStyles = createStylesHook({\r\n  navSeparator: {\r\n    width: `50%`,\r\n  },\r\n})\r\n","import { ReactNode } from \"react\"\r\nimport { createStylesHook } from \"@fet/theming\"\r\n\r\nexport type NavLinkExtensionProps = {\r\n  children?: ReactNode\r\n  body?: ReactNode\r\n}\r\n\r\nexport default function NavLinkExtension({ children, body }:NavLinkExtensionProps) {\r\n  children ||= body\r\n\r\n  const [ classes ] = useStyles()\r\n\r\n  return (\r\n    <div className={classes.navLinkExtension}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst useStyles = createStylesHook( ({ atoms }) => ({\r\n  navLinkExtension: {\r\n    position: `absolute`,\r\n    left: `100%`,\r\n    top: 10,\r\n    bottom: 10,\r\n    display: `flex`,\r\n    alignItems: `center`,\r\n    padding: 10,\r\n    backgroundColor: atoms.colors.surface.main,\r\n    color: atoms.colors.surface.text,\r\n  },\r\n}) )\r\n","export default function getWindow() {\r\n  return typeof window === `undefined` ? null : window\r\n}\r\n","import { ReactNode } from \"react\"\r\nimport cn from \"@lib/theming/createClassName\"\r\nimport getWindow from \"@lib/core/functions/getWindow\"\r\nimport { createStylesHook } from \"@fet/theming\"\r\n\r\nexport type NavItemProps = {\r\n  children: ReactNode\r\n  href: string\r\n}\r\n\r\nexport default function NavLink({ children, href }) {\r\n  const [ classes ] = useStyles()\r\n  const isCurrentHref = [ href, href + `/` ].includes( getWindow()?.location.pathname )\r\n\r\n  console.log( getWindow()?.location.pathname, href, href + `/`, isCurrentHref, cn( classes.navLink, isCurrentHref && classes.isActive ) )\r\n\r\n  return (\r\n    <a className={cn( classes.navLink, isCurrentHref && classes.isActive )} href={href}>\r\n      <div className={classes.content}>\r\n        {children}\r\n      </div>\r\n    </a>\r\n  )\r\n}\r\n\r\nconst useStyles = createStylesHook({\r\n  navLink: {\r\n    position: `relative`,\r\n    display: `block`,\r\n    padding: 10,\r\n\r\n    \"&::after\": {\r\n      content: `\"\"`,\r\n      position: `absolute`,\r\n      left: -5,\r\n      top: `50%`,\r\n      translate: `0 -50%`,\r\n      display: `block`,\r\n      width: 4,\r\n      height: 4,\r\n      backgroundColor: `#fff`,\r\n      borderRadius: `15px`,\r\n      transition: `left 0.05s`,\r\n    },\r\n\r\n    \"&:hover::after, &$isActive::after\": {\r\n      left: 2,\r\n    },\r\n\r\n    \"&$isActive::after\": {\r\n      height: 20,\r\n    },\r\n\r\n    \"&:not( $isActive ):hover $content\": {\r\n      borderRadius: 20,\r\n    },\r\n  },\r\n  content: {\r\n    borderRadius: `50%`,\r\n    overflow: `hidden`,\r\n    transition: `border-radius 0.1s`,\r\n  },\r\n\r\n  isActive: {\r\n    \"& $content\": {\r\n      borderRadius: 10,\r\n    },\r\n  },\r\n})\r\n","import { StaticImage } from \"gatsby-plugin-image\"\r\nimport { createStylesHook } from \"@fet/theming\"\r\nimport NavSeparator from \"./NavSeparator\"\r\nimport NavLinkExtension from \"./NavLinkExtension\"\r\nimport NavLink from \"./NavLink\"\r\n\r\nexport type NavProps = {}\r\n\r\nconst imagesFolderPath = `../../../../images`\r\n\r\nexport default function Nav() {\r\n  const [ classes ] = useStyles()\r\n\r\n  return (\r\n    <nav className={classes.nav}>\r\n      <NavLink href=\"/\">\r\n        <StaticImage src={`${imagesFolderPath}/cactu-logo.png`} alt=\"Cactu logo\" />\r\n      </NavLink>\r\n\r\n      <NavSeparator />\r\n\r\n      <NavLink href=\"/jam\">\r\n        <StaticImage src={`${imagesFolderPath}/cactu-jam.png`} alt=\"CactuJam temporary icon\" />\r\n\r\n        <NavLinkExtension body=\"CactuJam\" />\r\n      </NavLink>\r\n    </nav>\r\n  )\r\n}\r\n\r\nconst useStyles = createStylesHook( ({ atoms }) => ({\r\n  nav: {\r\n    width: 75,\r\n    backgroundColor: atoms.colors.surface.main,\r\n    backdropFilter: `blur( 2px )`,\r\n  },\r\n}) )\r\n","import { useState } from \"react\"\r\n\r\nexport type Objectkey = string | number | symbol\r\n\r\nexport type InitialValue<K extends Objectkey, V> = null | Record<K, V> | (() => null | Record<K, V>)\r\n\r\ntype Dispatcher<T> = (prevObj:T) => Partial<T>\r\nexport type StateDispatcher<K extends Objectkey, V, Value extends null | Record<string, unknown>> = {\r\n  (dispatcher:Dispatcher<Value>): void\r\n  (obj:Partial<Value>): void\r\n  (key:K, value:V): void\r\n}\r\n\r\ntype RetType<K extends Objectkey, V, Value extends null | Record<any, any>> = [Value, StateDispatcher<K, V, Value>]\r\n\r\ntype RetFromGeneric<T> = T extends Record<infer K, infer V>\r\n  ? RetType<K, V, Partial<T>>\r\n  : T extends undefined\r\n    ? RetType<string, any, Record<string, unknown>>\r\n    : RetType<string, T, Record<string, T>>\r\n\r\ntype RetFromInit<Init extends InitialValue<any, any>> = [Init] extends [((...params) => infer R)]\r\n  ? [R] extends [InitialValue<infer K, infer V>]\r\n    ? [R] extends [null]\r\n      ? RetType<K, V, null | Record<string, unknown>>\r\n      : RetType<K, V, R>\r\n    : never\r\n  : Init extends InitialValue<infer K, infer V>\r\n    ? [Init] extends [null]\r\n      ? RetType<K, V, null | Record<string, unknown>>\r\n      : RetType<K, V, Init>\r\n    : never\r\n\r\ntype ImplementedRet<K extends Objectkey, V, Init extends InitialValue<K, V>> = Init extends undefined ? RetType<K, V, Record<K, V>> : RetFromInit<Init>\r\n\r\nexport default useObjectState\r\nexport function useObjectState<T = undefined>():RetFromGeneric<T>\r\nexport function useObjectState<K extends string, V>():RetFromInit<Record<K, V>>\r\nexport function useObjectState<K extends string, V, Init extends InitialValue<K, V> = InitialValue<K, V>>( initialValue:Init ):RetFromInit<Init>\r\nexport function useObjectState<\r\n  K extends string,\r\n  V extends unknown,\r\n  Init extends InitialValue<K, V>,\r\n>(\r\n  initialValue?:Init,\r\n): ImplementedRet<K, V, Init> {\r\n  const [ state, setState ] = useState<null | Partial<Record<K, V>>>(\r\n    (initialValue !== undefined ? (typeof initialValue === `function` ? initialValue() : initialValue) : {} as Record<K, V>),\r\n  )\r\n\r\n  type State = typeof state\r\n\r\n  const setStateObject:StateDispatcher<K, V, State> = (dispatcherOrObjOrKey:Dispatcher<State> | Partial<State> | K, maybeValue?:V) => {\r\n    if (typeof dispatcherOrObjOrKey === `function`) {\r\n      return setState( prevObj => dispatcherOrObjOrKey( prevObj ) )\r\n    }\r\n\r\n    if (typeof dispatcherOrObjOrKey === `object` && !Array.isArray( dispatcherOrObjOrKey )) {\r\n      return setState( prevObj => {\r\n        if (prevObj) return { ...prevObj, ...dispatcherOrObjOrKey  }\r\n        return { ...dispatcherOrObjOrKey }\r\n      } )\r\n    }\r\n\r\n    if (typeof dispatcherOrObjOrKey === `string` && maybeValue) {\r\n      return setState( prevObj => {\r\n        if (prevObj) return { ...prevObj, [ dispatcherOrObjOrKey ]:maybeValue }\r\n        return { [ dispatcherOrObjOrKey ]:maybeValue } as Record<K, V>\r\n      } )\r\n    }\r\n  }\r\n\r\n  return [ state, setStateObject ] as ImplementedRet<K, V, Init>\r\n}\r\n\r\n// function Test() {\r\n//   const [ values_1, setValues_1 ] = useObjectState()\r\n//   const [ values_2, setValues_2 ] = useObjectState( null )\r\n//   const [ values_3, setValues_3 ] = useObjectState({ a:1 })\r\n//   const [ values_4, setValues_4 ] = useObjectState<{ b: number }>()\r\n//   const [ values_5, setValues_5 ] = useObjectState( () => null )\r\n//   const [ values_6, setValues_6 ] = useObjectState( () => ({ c:1, d:2 }) )\r\n//   const [ values_7, setValues_7 ] = useObjectState( () => Math.random() > 0.5 ? { e:3 } : null )\r\n//   const [ values_8, setValues_8 ] = useObjectState<string, number>()\r\n\r\n//   values_1.abc\r\n//   setValues_1( null )\r\n//   setValues_1({ a:1 })\r\n//   setValues_1( ``, 2 )\r\n//   setValues_1( () => ({ abc:3 }) )\r\n//   setValues_1( () => `4` )\r\n//   setValues_1( () => 5 )\r\n\r\n//   values_2.abc\r\n//   values_2?.abc\r\n//   setValues_2( null )\r\n//   setValues_2({ a:1 })\r\n//   setValues_2( `abc`, 2 )\r\n//   setValues_2( () => ({ abc:3 }) )\r\n//   setValues_2( () => `4` )\r\n//   setValues_2( () => 5 )\r\n\r\n//   values_3.abc\r\n//   values_3?.abc\r\n//   values_3.a\r\n//   setValues_3( null )\r\n//   setValues_3({ a:1 })\r\n//   setValues_3( `a`, 2 )\r\n//   setValues_3( () => ({ a:3 }) )\r\n//   setValues_3( () => ({ abc:3 }) )\r\n//   setValues_3( () => `a` )\r\n//   setValues_3( () => 3 )\r\n\r\n//   values_4.abc\r\n//   values_4.b\r\n//   values_4?.b\r\n//   setValues_4( null )\r\n//   setValues_4({ b:1 })\r\n//   setValues_4( `b`, 2 )\r\n//   setValues_4( () => ({ b:3 }) )\r\n//   setValues_4( () => ({ a:3 }) )\r\n//   setValues_4( () => `a` )\r\n//   setValues_4( () => 3 )\r\n\r\n//   values_5.abc\r\n//   values_5?.abc\r\n//   setValues_5( null )\r\n//   setValues_5({ abc:1 })\r\n//   setValues_5( `abc`, 2 )\r\n//   setValues_5( () => ({ abc:3 }) )\r\n//   setValues_5( () => `a` )\r\n//   setValues_5( () => 3 )\r\n\r\n//   values_6.abc\r\n//   values_6.c\r\n//   setValues_6({ c:2 })\r\n//   setValues_6( `d`, 2 )\r\n//   setValues_6( () => ({ c:3 }) )\r\n//   setValues_6( () => `a` )\r\n//   setValues_6( () => 3 )\r\n\r\n//   values_7.abc\r\n//   values_7?.abc\r\n//   values_7.e\r\n//   values_7?.e\r\n//   setValues_7({ e:2 })\r\n//   setValues_7( `e`, 2 )\r\n//   setValues_7( () => ({ e:1 }) )\r\n//   setValues_7( () => `a` )\r\n//   setValues_7( () => 3 )\r\n\r\n//   values_8.abc\r\n//   values_8?.abc\r\n//   values_8.e\r\n//   values_8?.e\r\n//   setValues_8({ e:2 })\r\n//   setValues_8( `e`, 2 )\r\n//   setValues_8( () => ({ e:1 }) )\r\n//   setValues_9( () => `a` )\r\n//   setValues_9( () => 3 )\r\n// }\r\n","import { ThemeProvider as JSSThemeProvider } from \"react-jss\"\r\nimport { ReactNode, useEffect, useMemo } from \"react\"\r\nimport useObjectState from \"../core/hooks/useObjectState\"\r\nimport { Primitive, ThemeConfig, ThemeStateSetter } from \"./types\"\r\nimport createTheme from \"./createTheme\"\r\n\r\nexport type ThemeProviderProps = {\r\n  themeConfig: ThemeConfig<any, any, any, any>\r\n  children: ReactNode\r\n}\r\n\r\nexport default function ThemeProvider({ children, themeConfig }:ThemeProviderProps) {\r\n  const initialState = useMemo<Record<string, Primitive>>( () => themeConfig.state ?? {}, [ themeConfig ] )\r\n  const [ themeState, setThemeState ] = useObjectState( initialState )\r\n  const setState:ThemeStateSetter<typeof initialState> = (key, value) => setThemeState( key, value )\r\n  const theme = useMemo( () => createTheme({ ...themeConfig, state:themeState }), [ themeConfig, themeState ] )\r\n\r\n  useEffect( () => {\r\n    themeConfig.onStateChange?.( themeState )\r\n  }, [ themeState ] )\r\n\r\n  return (\r\n    <JSSThemeProvider theme={{ ...theme, state:themeState, setState }}>\r\n      {children}\r\n    </JSSThemeProvider>\r\n  )\r\n}\r\n","import { AtomsStruct, Primitive, Theme, ThemeConfig, UserDefinedStyles } from \"./types\"\r\n\r\nexport default function createTheme<\r\n  State extends Record<string, Primitive>,\r\n  Atoms extends AtomsStruct,\r\n  Mixins extends UserDefinedStyles,\r\n  Components extends UserDefinedStyles,\r\n>( themeCreator:ThemeConfig<State, Atoms, Mixins, Components> ): Theme<State, Atoms, Mixins, Components> {\r\n  const state = (themeCreator.state ?? {}) as State\r\n  const atoms = (themeCreator.atoms?.({ state }) ?? {}) as Atoms\r\n  const mixins = (themeCreator.mixins?.({ state, atoms })) as Mixins\r\n  const components = (themeCreator.components?.({ state, atoms, mixins }) ?? {}) as Components\r\n\r\n  return {\r\n    state,\r\n    atoms,\r\n    mixins,\r\n    components,\r\n  }\r\n}\r\n","import { ReactNode } from \"react\"\r\nimport ThemeProvider from \"@lib/theming/ThemeProvider\"\r\nimport { themeConfig } from \"@fet/theming\"\r\n\r\nexport type AppConfigProps = {\r\n  children: ReactNode\r\n}\r\n\r\nexport default function AppConfig({ children }:AppConfigProps) {\r\n  return (\r\n    <ThemeProvider themeConfig={themeConfig}>\r\n      {children}\r\n    </ThemeProvider>\r\n  )\r\n}\r\n","import { ReactNode } from \"react\"\r\nimport { createStylesHook } from \"@fet/theming\"\r\nimport BlinkingLinesBgr from \"@fet/dynamicBackground/BlinkingLinesBgr\"\r\nimport Nav from \"./Nav\"\r\nimport AppConfig from \"./AppConfig\"\r\n\r\nexport type MainLayoutProps = {\r\n  children: ReactNode\r\n}\r\n\r\nfunction RealMainLayout({ children }:MainLayoutProps) {\r\n  const [ classes ] = useStyles()\r\n\r\n  return (\r\n    <div className={classes.mainLayout}>\r\n      <BlinkingLinesBgr />\r\n\r\n      <Nav />\r\n\r\n      <div className={classes.content}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function MainLayout({ children }:MainLayoutProps) {\r\n  return (\r\n    <AppConfig>\r\n      <RealMainLayout>\r\n        {children}\r\n      </RealMainLayout>\r\n    </AppConfig>\r\n  )\r\n}\r\n\r\nconst useStyles = createStylesHook( ({ atoms }) => ({\r\n  \"@global\": {\r\n    '@font-face': {\r\n      fontFamily: `Coconut`,\r\n      src: `url( /fonts/Coconut.ttf )`,\r\n    },\r\n\r\n    body: {\r\n      margin: 0,\r\n      backgroundColor: atoms.colors.background.main,\r\n      backgroundImage: `linear-gradient( 135deg, ${atoms.colors.background.dark}, ${atoms.colors.background.light} )`,\r\n      fontFamily: `sans-serif`,\r\n    },\r\n  },\r\n  mainLayout: {\r\n    display: `flex`,\r\n    minHeight: `100vh`,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n  },\r\n}) )\r\n","import { createTheming } from \"@lib/theming\"\r\n\r\nexport const { createStylesHook, themeConfig } = createTheming({\r\n  atoms: () => ({\r\n    colors: {\r\n      rest: {\r\n        green: `#5da234`,\r\n      },\r\n      background: {\r\n        dark: `#202022`,\r\n        light: `#22232a`,\r\n        main: `#212226`,\r\n        text: `#eaeaea`,\r\n      },\r\n      surface: {\r\n        main: `#05051055`,\r\n        text: `#eaeaea`,\r\n      },\r\n    },\r\n  }),\r\n})\r\n","import { useTheme as jssUseTheme } from \"react-jss\"\r\nimport { AtomsStruct, Primitive, StylesCreator, Theme, ThemeConfig, ThemeWithActions, ThemeWithActionsFrom, UserDefinedStyles } from \"./types\"\r\nimport createStylesHook, { UseStyles } from \"./createStylesHook\"\r\n\r\ntype StylesHookCreator<Them extends Theme<any, any, any, any>> = <Classes extends UserDefinedStyles>(stylesCreator:Classes | StylesCreator<Them, Classes>) => UseStyles<Classes, ThemeWithActionsFrom<Them>>\r\ntype Theming<\r\n  State extends Record<string, Primitive>,\r\n  Atoms extends AtomsStruct,\r\n  Mixins extends UserDefinedStyles,\r\n  Components extends UserDefinedStyles,\r\n> = {\r\n  themeConfig: ThemeConfig<State, Atoms, Mixins, Components>\r\n  useTheme: () => ThemeWithActions<State, Atoms, Mixins, Components>\r\n  createStylesHook: StylesHookCreator<Theme<State, Atoms, Mixins, Components>>\r\n}\r\n\r\nexport type ThemeFromConfig<Config extends ThemeConfig<any, any, any, any>> = Config extends ThemeConfig<infer S, infer A, infer M, infer C> ? Theme<S, A, M, C> : never\r\n\r\nexport function createTheming<\r\n  State extends Record<string, Primitive> = {},\r\n  Atoms extends AtomsStruct = {},\r\n  Mixins extends UserDefinedStyles = UserDefinedStyles,\r\n  Components extends UserDefinedStyles = UserDefinedStyles,\r\n>( themeConfig:ThemeConfig<State, Atoms, Mixins, Components> ):Theming<State, Atoms, Mixins, Components>\r\n\r\nexport function createTheming<Them extends ThemeConfig<any, any, any, any>>( themeConfig:Them ) {\r\n  const themedCreateStylesHook = <Classes extends UserDefinedStyles = UserDefinedStyles>(stylesCreator:Classes | StylesCreator<ThemeFromConfig<Them>, Classes>) =>\r\n    createStylesHook<Classes, ThemeFromConfig<Them>>( stylesCreator )\r\n\r\n  const useTheme = jssUseTheme\r\n\r\n  return { themeConfig, createStylesHook:themedCreateStylesHook, useTheme }\r\n}\r\n","export function createClassName( ...classes ) {\r\n  return classes.reduce(\r\n    (str, name) => name && typeof name === `string` ? `${str} ${name.trim()}` : str\r\n    , ``,\r\n  ).trim()\r\n}\r\n\r\nexport default function cn( ...classes ) {\r\n  return createClassName( ...classes )\r\n}\r\n\r\n","import { createUseStyles, useTheme } from \"react-jss\"\r\nimport { StylesCreator, Theme, ThemeWithActions, ThemeWithActionsFrom, UserDefinedStyles } from \"./types\"\r\n\r\nexport type UseStyles<Classes extends UserDefinedStyles, Them extends null | ThemeWithActions<any, any, any, any>> = () => [\r\n  { [K in keyof Classes]:string },\r\n  Them\r\n]\r\n\r\nexport default function createStylesHook<\r\n  Classes extends UserDefinedStyles,\r\n  Them extends null | Theme<any, any, any, any>,\r\n>( stylesCreator:Classes | StylesCreator<Them, Classes> ): UseStyles<Classes, ThemeWithActionsFrom<Them>> {\r\n  const useStyles = createUseStyles( stylesCreator )\r\n\r\n  return () => {\r\n    const theme = useTheme<ThemeWithActionsFrom<Them>>()\r\n\r\n    if (!theme) throw new Error( `You are trying to use theming functionality outside theming context` )\r\n\r\n    const classes = useStyles() as { [K in keyof Classes]:string }\r\n\r\n    return [ classes, theme ]\r\n  }\r\n}\r\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","q","P","H","srcSet","decoding","undefined","fallback","t","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","Line","y","showingSpeed","speed","showing","BlinkingLines","lines","animate","ctx","canvas","canvasWidth","canvasHeight","clearRect","forEach","line","fillStyle","toString","padStart","fillRect","_this","createLine","generateObjects","aX","aY","bX","bY","this","splice","fails","addIt","Math","sqrt","push","xZero","windowWidth","window","innerWidth","windowHeight","innerHeight","random","min","max","floor","DynamicBackgroundBase","canvasElement","onResize","getContext","enable","disable","BlinkingLinesBgr","canvasRef","logicRef","classes","useStyles","_logicRef$current","_jsx","blinkingLinesBgr","createStylesHook","NavSeparator","navSeparator","NavLinkExtension","body","navLinkExtension","atoms","alignItems","padding","colors","surface","main","color","text","getWindow","NavLink","href","isCurrentHref","includes","_getWindow","location","pathname","log","_getWindow2","cn","navLink","isActive","content","translate","borderRadius","imagesFolderPath","Nav","_jsxs","nav","backdropFilter","initialValue","useState","state","setState","dispatcherOrObjOrKey","maybeValue","prevObj","ThemeProvider","themeConfig","initialState","useObjectState","themeState","setThemeState","theme","themeCreator","_themeCreator$atoms2","mixins","_themeCreator$mixins","components","_themeCreator$compone2","onStateChange","JSSThemeProvider","value","AppConfig","RealMainLayout","mainLayout","MainLayout","fontFamily","margin","background","backgroundImage","dark","light","minHeight","flexGrow","stylesCreator","useTheme","jssUseTheme","createTheming","green","createClassName","arguments","reduce","str","name","createUseStyles"],"sourceRoot":""}